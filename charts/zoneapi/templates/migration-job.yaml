{{- if .Values.migration.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "zoneapi.fullname" . }}-migration-{{ .Values.image.tag | default .Chart.AppVersion | replace "." "-" }}
  labels:
    {{- include "zoneapi.labels" . | nindent 4 }}
    app.kubernetes.io/component: migration
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: {{ .Values.migration.backoffLimit | default 3 }}
  activeDeadlineSeconds: {{ .Values.migration.timeout | default 600 }}
  template:
    metadata:
      labels:
        {{- include "zoneapi.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-db
          image: postgres:15-alpine
          command:
            - /bin/bash
            - -c
            - |
              echo "=== Database Readiness Check ==="
              echo "Waiting for PostgreSQL to be ready..."
              echo "Host: $DB_HOST, Port: $DB_PORT, User: $DB_USER"
              
              # Wait up to 2 minutes for database (24 attempts x 5 seconds = 2 minutes)
              for i in {1..24}; do
                if pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; then
                  echo "PostgreSQL is ready!"
                  
                  # Test actual connection
                  if psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
                    echo "Database connection successful!"
                    exit 0
                  else
                    echo "PostgreSQL is ready but connection failed. Retrying..."
                  fi
                else
                  echo "PostgreSQL is not ready yet. Attempt $i/24..."
                fi
                sleep 5
              done
              
              echo "Database readiness check failed after 2 minutes"
              exit 1
          env:
            - name: DB_HOST
              value: {{ .Values.database.host | quote }}
            - name: DB_PORT
              value: {{ .Values.database.port | quote }}
            - name: DB_USER
              value: {{ .Values.database.user | quote }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "zoneapi.fullname" . }}-db-secret
                  key: password
      containers:
        - name: migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              echo "=== Database Migration ==="
              echo "Starting EF Core migration..."
              echo "Connection string: Host={{ .Values.database.host }};Port={{ .Values.database.port }};Database={{ .Values.database.name }};Username={{ .Values.database.user }};Password=***;CommandTimeout=300;Timeout=60;"
              
              # Ensure efbundle is executable
              chmod +x /app/efbundle
              
              # Run migration with detailed output (matching docker-compose format exactly)
              /app/efbundle --connection "Host={{ .Values.database.host }};Port={{ .Values.database.port }};Database={{ .Values.database.name }};Username={{ .Values.database.user }};Password=$DB_PASSWORD;CommandTimeout=300;Timeout=60;" --verbose
              
              if [ $? -eq 0 ]; then
                echo "Migration completed successfully!"
              else
                echo "Migration failed!"
                exit 1
              fi
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: {{ .Values.environment | quote }}
            - name: DOTNET_BUNDLE_EXTRACT_BASE_DIR
              value: "/tmp"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "zoneapi.fullname" . }}-db-secret
                  key: password
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
{{- end }} 